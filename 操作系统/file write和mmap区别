file write 和 mmap 都是用于文件操作的技术，但它们的工作方式和适用场景有所不同。file write 是一种传统的系统调用，通过内核将数据从用户空间复制到内核空间，然后再由内核写入磁盘。而 mmap (memory mapping) 则是将文件映射到进程的虚拟地址空间，使得文件内容看起来像是进程的内存一样，可以直接通过指针进行读写，从而减少了数据拷贝的开销，提高了效率。﻿
file write (文件写入):
原理:write() 系统调用是直接将数据从用户空间复制到内核空间，然后由内核将数据写入磁盘。
特点:
简单直接，易于理解和使用。
每次写操作都需要进行内核态和用户态的切换，以及数据拷贝。
适用于小文件或不需要频繁读写的场景。
可以进行增量写，支持文件大小的动态扩展。
适用场景:一般的文件读写，比如日志记录、小文件存储等。
mmap (内存映射):
原理:
mmap() 系统调用将文件映射到进程的虚拟内存地址空间，使得进程可以直接访问文件内容，就像访问内存一样。
特点:
避免了内核态和用户态之间的数据拷贝，提高了读写效率。
映射后的内存区域是虚拟内存，只有在访问时才会被加载到物理内存。
需要预先知道文件大小，不适合频繁修改文件大小的场景。
可以通过指针直接修改文件内容，无需额外的系统调用。
适用场景:
大文件读写、数据库、共享内存等，需要高性能读写，且文件大小相对固定的场景。
总结:
file write 适用于简单、小型的文件操作，以及需要频繁修改文件大小的场景。
mmap 适用于大文件读写、需要高性能的场景，以及需要直接操作文件内容的情况。
mmap 在某些情况下可以显著提升性能，但需要谨慎使用，因为它可能会导致一些问题，比如内存泄漏、数据一致性等。
在使用 mmap 时，需要确保对文件映射区域的访问是安全的，并且要妥善处理映射的生命周期，避免出现问题。
mmap 不仅可以用于文件操作，还可以用于创建共享内存等。


mmap无法做append file操作。
